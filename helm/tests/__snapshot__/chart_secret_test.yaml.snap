chart should match snapshot:
  1: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: app
        secret.reloader.stakater.com/reload: mychart-play-backend
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-play-backend
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/component: backend
          app.kubernetes.io/instance: mychart
          app.kubernetes.io/name: play
      template:
        metadata:
          labels:
            app.kubernetes.io/component: backend
            app.kubernetes.io/instance: mychart
            app.kubernetes.io/name: play
        spec:
          containers:
            - envFrom:
                - secretRef:
                    name: mychart-play-backend
              image: stefanprodan/podinfo:latest
              imagePullPolicy: IfNotPresent
              name: app
              ports:
                - containerPort: 8080
  2: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: app
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-play-frontend
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/component: frontend
          app.kubernetes.io/instance: mychart
          app.kubernetes.io/name: play
      template:
        metadata:
          labels:
            app.kubernetes.io/component: frontend
            app.kubernetes.io/instance: mychart
            app.kubernetes.io/name: play
        spec:
          containers:
            - image: docker.io/frontend:latest
              imagePullPolicy: IfNotPresent
              name: app
              ports:
                - containerPort: 8080
  3: |
    apiVersion: v1
    data:
      annotations: |
        last-synced: {{ now }}
      backend: |
        {{ $app := "backend" }}
        {{ $env := "test" }}

        {{ $applicationContext := dict "data" (.application | fromJson) "env" $env "app" $app "entry" "application" }}
        {{ $externalContext := dict "data" (.external | fromJson) "env" $env "app" $app "entry" "external" }}


        {{- define "getEnvValue" -}}
          {{- $data := .context.data }}
          {{- range $key := (split "." .key) }}
            {{- if $data }}
              {{- $data = index $data $key }}
            {{- end }}
          {{- end }}

          {{- if $data }}
            {{- if eq "string" (printf "%T" $data) }}
              {{- printf "%s" ($data | replace "'" "''") }}
            {{- else }}
              {{- if index $data .context.env }}
                {{- printf "%s" (index $data .context.env | replace "'" "''") }}
              {{- else }}
                {{- if index $data "default" }}
                  {{- printf "%s" (index $data "default" | replace "'" "''") }}
                {{- else }}
                  {{- printf "ERROR: [%s][%s] '%s' is not defined neither for '%s' nor default\n" .context.app .context.entry .key .context.env }}
                  {{- $error := index nil "key is not set for that specific env and has not default value" }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- else }}
            {{- printf "ERROR: [%s][%s] Unable to find '%s'\n" .context.app .context.entry .key }}
            {{- $error := index nil "Unable to find the given key" }}
          {{- end }}
        {{- end }}

        password: '{{ template "getEnvValue" (dict "context" $applicationContext "key" "db.password") }}'

        api-key: '{{ template "getEnvValue" (dict "context" $externalContext "key" "api.key") }}'

        connection: 'postgres://user:{{ template "getEnvValue" (dict "context" $applicationContext "key" "db.password") }}@db.connection-string'

        connection-json:    |
          {
            "connection": "postgres://user:{{ template "getEnvValue" (dict "context" $applicationContext "key" "db.password") }}@db.connection-string"
          }

        connection-multiline:    |
          postgres://user:{{ template "getEnvValue" (dict "context" $applicationContext "key" "db.password") }}@db.connection-string

        template-connection: 'postgres://user:{{ template "getEnvValue" (dict "context" $applicationContext "key" "db.password") }}@db.connection-string'
    kind: ConfigMap
    metadata:
      name: mychart-play-backend-secretconfig
  4: |
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: mychart-play-backend
    spec:
      data:
        - remoteRef:
            key: external-secrets-project-test-application
          secretKey: application
        - remoteRef:
            key: external-secrets-project-test-external
          secretKey: external
      refreshInterval: 12h
      secretStoreRef:
        kind: ClusterSecretStore
        name: fake
      target:
        name: mychart-play-backend
        template:
          engineVersion: v2
          metadata:
            annotations:
              reloader.stakater.com/match: "true"
            labels:
              chart-app: backend
              chart-secret-source: external-secrets
          templateFrom:
            - configMap:
                items:
                  - key: backend
                    templateAs: KeysAndValues
                name: mychart-play-backend-secretconfig
              target: Data
            - configMap:
                items:
                  - key: annotations
                    templateAs: KeysAndValues
                name: mychart-play-backend-secretconfig
              target: Annotations
  5: |
    apiVersion: v1
    data:
      annotations: |
        last-synced: {{ now }}
      common: |
        {{ $app := "common" }}
        {{ $env := "test" }}

        {{ $clusterContext := dict "data" (.cluster | fromJson) "env" $env "app" $app "entry" "cluster" }}


        {{- define "getEnvValue" -}}
          {{- $data := .context.data }}
          {{- range $key := (split "." .key) }}
            {{- if $data }}
              {{- $data = index $data $key }}
            {{- end }}
          {{- end }}

          {{- if $data }}
            {{- if eq "string" (printf "%T" $data) }}
              {{- printf "%s" ($data | replace "'" "''") }}
            {{- else }}
              {{- if index $data .context.env }}
                {{- printf "%s" (index $data .context.env | replace "'" "''") }}
              {{- else }}
                {{- if index $data "default" }}
                  {{- printf "%s" (index $data "default" | replace "'" "''") }}
                {{- else }}
                  {{- printf "ERROR: [%s][%s] '%s' is not defined neither for '%s' nor default\n" .context.app .context.entry .key .context.env }}
                  {{- $error := index nil "key is not set for that specific env and has not default value" }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- else }}
            {{- printf "ERROR: [%s][%s] Unable to find '%s'\n" .context.app .context.entry .key }}
            {{- $error := index nil "Unable to find the given key" }}
          {{- end }}
        {{- end }}

        token: '{{ template "getEnvValue" (dict "context" $clusterContext "key" "sa.token") }}'
    kind: ConfigMap
    metadata:
      name: mychart-play-common-secretconfig
  6: |
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: mychart-play-common
    spec:
      data:
        - remoteRef:
            key: external-secrets-project-test-cluster
          secretKey: cluster
      refreshInterval: 12h
      secretStoreRef:
        kind: ClusterSecretStore
        name: fake
      target:
        name: mychart-play-common
        template:
          engineVersion: v2
          metadata:
            annotations:
              reloader.stakater.com/match: "true"
            labels:
              chart-app: common
              chart-secret-source: external-secrets
          templateFrom:
            - configMap:
                items:
                  - key: common
                    templateAs: KeysAndValues
                name: mychart-play-common-secretconfig
              target: Data
            - configMap:
                items:
                  - key: annotations
                    templateAs: KeysAndValues
                name: mychart-play-common-secretconfig
              target: Annotations
  7: |
    apiVersion: v1
    data:
      annotations: |
        last-synced: {{ now }}
      templated: |
        {{ $app := "templated" }}
        {{ $env := "test" }}

        {{ $clusterContext := dict "data" (.cluster | fromJson) "env" $env "app" $app "entry" "cluster" }}


        {{- define "getEnvValue" -}}
          {{- $data := .context.data }}
          {{- range $key := (split "." .key) }}
            {{- if $data }}
              {{- $data = index $data $key }}
            {{- end }}
          {{- end }}

          {{- if $data }}
            {{- if eq "string" (printf "%T" $data) }}
              {{- printf "%s" ($data | replace "'" "''") }}
            {{- else }}
              {{- if index $data .context.env }}
                {{- printf "%s" (index $data .context.env | replace "'" "''") }}
              {{- else }}
                {{- if index $data "default" }}
                  {{- printf "%s" (index $data "default" | replace "'" "''") }}
                {{- else }}
                  {{- printf "ERROR: [%s][%s] '%s' is not defined neither for '%s' nor default\n" .context.app .context.entry .key .context.env }}
                  {{- $error := index nil "key is not set for that specific env and has not default value" }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- else }}
            {{- printf "ERROR: [%s][%s] Unable to find '%s'\n" .context.app .context.entry .key }}
            {{- $error := index nil "Unable to find the given key" }}
          {{- end }}
        {{- end }}

        access-json:    |
          {
            "token": "{{ template "getEnvValue" (dict "context" $clusterContext "key" "sa.token") }}"
          }
    kind: ConfigMap
    metadata:
      name: token-secretconfig
  8: |
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: token
    spec:
      data:
        - remoteRef:
            key: external-secrets-project-test-cluster
          secretKey: cluster
      refreshInterval: 12h
      secretStoreRef:
        kind: ClusterSecretStore
        name: fake
      target:
        name: token
        template:
          engineVersion: v2
          metadata:
            annotations:
              reloader.stakater.com/match: "true"
            labels:
              chart-app: templated
              chart-secret-source: external-secrets
          templateFrom:
            - configMap:
                items:
                  - key: templated
                    templateAs: KeysAndValues
                name: token-secretconfig
              target: Data
            - configMap:
                items:
                  - key: annotations
                    templateAs: KeysAndValues
                name: token-secretconfig
              target: Annotations
