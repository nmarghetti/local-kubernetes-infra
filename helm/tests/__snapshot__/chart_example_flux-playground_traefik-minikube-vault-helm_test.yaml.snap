chart should match snapshot:
  1: |
    apiVersion: v1
    data:
      index.html: |
        <!-- ######## This is a comment, visible only in the source editor  ######## -->
        <h1 style="color: #4485b8;">Here are some services available</h1>
        <p></p>
        <ul>
        <li>Traefik dashboard - <a href="http://dashboard.traefik.minikube/" target="_blank" rel="noopener">http://dashboard.traefik.minikube/</a></li>
        <li>Whoami - <a href="http://whoami.traefik.minikube/" target="_blank" rel="noopener">http://whoami.traefik.minikube/</a></li>
        <li>Podinfo - <a href="http://podinfo.traefik.minikube/" target="_blank" rel="noopener">http://podinfo.traefik.minikube/</a></li>
        <li>Podinfo swagger - <a href="http://podinfo.traefik.minikube/swagger/index.html" target="_blank" rel="noopener">http://podinfo.traefik.minikube/swagger/index.html</a></li>
        </ul>
        <p style="text-align: left;"></p>
        <p style="text-align: left;"></p>
        <p style="text-align: left;"></p>
        <p style="text-align: center;">Generated with <a href="https://html6.com/editor/" target="_blank" rel="noopener">https://html6.com/editor/</a></p>
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-home
  2: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: app
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-home
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/component: home
          app.kubernetes.io/instance: mychart
          app.kubernetes.io/name: mychart
      template:
        metadata:
          labels:
            app.kubernetes.io/component: home
            app.kubernetes.io/instance: mychart
            app.kubernetes.io/name: mychart
        spec:
          containers:
            - image: docker.io/nginx:latest
              imagePullPolicy: Always
              name: app
              ports:
                - containerPort: 80
              volumeMounts:
                - mountPath: /usr/share/nginx/html/index.html
                  name: home
                  subPath: index.html
          volumes:
            - configMap:
                items:
                  - key: index.html
                    path: index.html
                name: mychart-home
              name: home
  3: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: app
        secret.reloader.stakater.com/reload: mychart-podinfo
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-podinfo
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/component: podinfo
          app.kubernetes.io/instance: mychart
          app.kubernetes.io/name: mychart
      template:
        metadata:
          labels:
            app.kubernetes.io/component: podinfo
            app.kubernetes.io/instance: mychart
            app.kubernetes.io/name: mychart
        spec:
          containers:
            - envFrom:
                - secretRef:
                    name: mychart-podinfo
              image: stefanprodan/podinfo:latest
              imagePullPolicy: Always
              name: app
              ports:
                - containerPort: 9898
                  name: podinfo
  4: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: app
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-whoami
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/component: whoami
          app.kubernetes.io/instance: mychart
          app.kubernetes.io/name: mychart
      template:
        metadata:
          labels:
            app.kubernetes.io/component: whoami
            app.kubernetes.io/instance: mychart
            app.kubernetes.io/name: mychart
        spec:
          containers:
            - image: containous/whoami:latest
              imagePullPolicy: Always
              name: app
              ports:
                - containerPort: 80
                  name: http
  5: |
    apiVersion: v1
    data:
      annotations: |
        last-synced: {{ now }}
      podinfo: |
        {{ $app := "podinfo" }}
        {{ $env := "" }}

        {{ $applicationContext := dict "data" (.application | fromJson) "env" $env "app" $app "entry" "application" }}


        {{- define "getEnvValue" -}}
          {{- $data := .context.data }}
          {{- range $key := (split "." .key) }}
            {{- if $data }}
              {{- $data = index $data $key }}
            {{- end }}
          {{- end }}

          {{- if $data }}
            {{- if eq "string" (printf "%T" $data) }}
              {{- printf "%s" ($data | replace "'" "''") }}
            {{- else }}
              {{- if index $data .context.env }}
                {{- printf "%s" (index $data .context.env | replace "'" "''") }}
              {{- else }}
                {{- if index $data "default" }}
                  {{- printf "%s" (index $data "default" | replace "'" "''") }}
                {{- else }}
                  {{- printf "ERROR: [%s][%s] '%s' is not defined neither for '%s' nor default\n" .context.app .context.entry .key .context.env }}
                  {{- $error := index nil "key is not set for that specific env and has not default value" }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- else }}
            {{- printf "ERROR: [%s][%s] Unable to find '%s'\n" .context.app .context.entry .key }}
            {{- $error := index nil "Unable to find the given key" }}
          {{- end }}
        {{- end }}

        api-admin-password: '{{ template "getEnvValue" (dict "context" $applicationContext "key" "api.admin.password") }}'

        PODINFO_UI_MESSAGE: 'Hello from cluster. Check swagger at /swagger/index.html. I also have a secret, the api admin password is {{ template "getEnvValue" (dict "context" $applicationContext "key" "api.admin.password") }}'
    kind: ConfigMap
    metadata:
      name: mychart-podinfo-secretconfig
  6: |
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: mychart-podinfo
    spec:
      data:
        - remoteRef:
            key: application
          secretKey: application
      refreshInterval: 12h
      secretStoreRef:
        kind: SecretStore
        name: store
      target:
        name: mychart-podinfo
        template:
          engineVersion: v2
          metadata:
            annotations:
              reloader.stakater.com/match: "true"
            labels:
              chart-app: podinfo
              chart-secret-source: external-secrets
          templateFrom:
            - configMap:
                items:
                  - key: podinfo
                    templateAs: KeysAndValues
                name: mychart-podinfo-secretconfig
              target: Data
            - configMap:
                items:
                  - key: annotations
                    templateAs: KeysAndValues
                name: mychart-podinfo-secretconfig
              target: Annotations
          type: Opaque
  7: |
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-home
    spec:
      ingressClassName: nginx
      rules:
        - host: home.minikube
          http:
            paths:
              - backend:
                  service:
                    name: mychart-home
                    port:
                      number: 80
                path: /
                pathType: Prefix
  8: |
    apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      annotations:
        kubernetes.io/ingress.class: traefik
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-podinfo
    spec:
      entryPoints:
        - web
      routes:
        - kind: Rule
          match: Host(`podinfo.traefik.minikube`)
          services:
            - kind: Service
              name: mychart-podinfo
              port: 9898
  9: |
    apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      annotations:
        kubernetes.io/ingress.class: traefik
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-whoami
    spec:
      entryPoints:
        - web
      routes:
        - kind: Rule
          match: Host(`whoami.traefik.minikube`)
          middlewares:
            - name: add-foo-bar
            - name: replace-path-regex
            - name: strip-prefix
            - name: strip-prefix
            - name: custom-header
          services:
            - kind: Service
              name: mychart-whoami
              port: 80
  10: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/component: home
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-home
    spec:
      ports:
        - port: 80
          targetPort: 80
      selector:
        app.kubernetes.io/component: home
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/name: mychart
      type: ClusterIP
  11: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/component: podinfo
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-podinfo
    spec:
      ports:
        - name: podinfo
          port: 9898
          targetPort: podinfo
      selector:
        app.kubernetes.io/component: podinfo
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/name: mychart
      type: ClusterIP
  12: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/component: whoami
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mychart
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-whoami
    spec:
      ports:
        - name: http
          port: 80
          targetPort: http
      selector:
        app.kubernetes.io/component: whoami
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/name: mychart
      type: ClusterIP
