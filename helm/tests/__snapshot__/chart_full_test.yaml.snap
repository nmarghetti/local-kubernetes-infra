chart should match snapshot:
  1: |
    apiVersion: v1
    data:
      document: |
        some line
        another line
      key: value
    kind: ConfigMap
    metadata:
      annotations:
        someAnnotation: something
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
        someLabel: label
      name: mychart-play-common
  2: |
    apiVersion: v1
    data:
      extraKey: extraValue
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-play-backend
  3: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        annotationKey: annotationValue
        anotherAnnotationKey: anotherAnnotationValue
        configmap.reloader.stakater.com/reload: mychart-play-backend,mychart-play-common,some-config,another-config,more-config
        kubectl.kubernetes.io/default-container: app
        secret.reloader.stakater.com/reload: some-secret,another-secret,more-secret,mychart-play-another-secret
      labels:
        anotherLabelKey: anotherLabelValue
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
        labelKey: labelValue
      name: mychart-play-backend
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/component: backend
          app.kubernetes.io/instance: mychart
          app.kubernetes.io/name: play
      template:
        metadata:
          annotations:
            prometheus: enabled
          labels:
            app.kubernetes.io/component: backend
            app.kubernetes.io/instance: mychart
            app.kubernetes.io/name: play
            prometheus: std-metrics
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                  - matchExpressions:
                      - key: kubernetes.io/hostname
                        operator: In
                        values:
                          - worker
          containers:
            - env:
                - name: key
                  value: value
                - name: env-key
                  value: value
                - name: config-key
                  valueFrom:
                    configMapKeyRef:
                      key: some.key
                      name: some-config
                - name: another-config-key
                  valueFrom:
                    configMapKeyRef:
                      key: another.some.key
                      name: mychart-play-some-config
              envFrom:
                - configMapRef:
                    name: mychart-play-common
                - configMapRef:
                    name: some-config
                - configMapRef:
                    name: another-config
                - secretRef:
                    name: some-secret
                - secretRef:
                    name: another-secret
                - configMapRef:
                    name: mychart-play-backend
                - configMapRef:
                    name: more-config
                - secretRef:
                    name: more-secret
                - secretRef:
                    name: mychart-play-another-secret
              image: stefanprodan/podinfo:latest
              imagePullPolicy: IfNotPresent
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /health
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 15
              name: app
              ports:
                - containerPort: 9898
                  name: podinfo
                - containerPort: 8080
                  name: http
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /health
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 15
              resources:
                limits:
                  cpu: 1
                  memory: 200Mi
                requests:
                  cpu: 1
                  memory: 100Mi
              startupProbe:
                failureThreshold: 10
                httpGet:
                  path: /health
                  port: http
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 15
                successThreshold: 1
                timeoutSeconds: 15
              volumeMounts:
                - mountPath: /usr/share/nginx/html/index.html
                  name: home
                  subPath: index.html
            - envFrom:
                - configMapRef:
                    name: mychart-play-more-config
                - secretRef:
                    name: mychart-play-another-secret
              image: docker.io/busybox:latest
              imagePullPolicy: Always
              livenessProbe:
                httpGet:
                  path: /ready
                  port: 8080
              name: init
              ports:
                - containerPort: 8080
              resources:
                limits:
                  cpu: 1
                  memory: 200Mi
                requests:
                  cpu: 1
                  memory: 100Mi
          initContainers:
            - command:
                - sh
                - -c
                - echo $(SOME_ENV) > /usr/share/nginx/html/index.html
              image: docker.io/busybox:latest
              name: init
          volumes:
            - configMap:
                items:
                  - key: document
                    path: index.html
                name: mychart-play-common
              name: home
  4: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: app
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-play-frontend
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/component: frontend
          app.kubernetes.io/instance: mychart
          app.kubernetes.io/name: play
      template:
        metadata:
          labels:
            app.kubernetes.io/component: frontend
            app.kubernetes.io/instance: mychart
            app.kubernetes.io/name: play
        spec:
          containers:
            - image: docker.io/frontend:latest
              imagePullPolicy: IfNotPresent
              name: app
              ports:
                - containerPort: 8080
  5: |
    apiVersion: v1
    data:
      annotations: |
        last-synced: {{ now }}
      common: |
        {{ $app := "common" }}
        {{ $env := "test" }}

        {{ $applicationContext := dict "data" (.application | fromJson) "env" $env "app" $app "entry" "application" }}
        {{ $clusterContext := dict "data" (.cluster | fromJson) "env" $env "app" $app "entry" "cluster" }}


        {{- define "getEnvValue" -}}
          {{- $data := .context.data }}
          {{- range $key := (split "." .key) }}
            {{- if $data }}
              {{- $data = index $data $key }}
            {{- end }}
          {{- end }}

          {{- if $data }}
            {{- if eq "string" (printf "%T" $data) }}
              {{- printf "%s" ($data | replace "'" "''") }}
            {{- else }}
              {{- if index $data .context.env }}
                {{- printf "%s" (index $data .context.env | replace "'" "''") }}
              {{- else }}
                {{- if index $data "default" }}
                  {{- printf "%s" (index $data "default" | replace "'" "''") }}
                {{- else }}
                  {{- printf "ERROR: [%s][%s] '%s' is not defined neither for '%s' nor default\n" .context.app .context.entry .key .context.env }}
                  {{- $error := index nil "key is not set for that specific env and has not default value" }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- else }}
            {{- printf "ERROR: [%s][%s] Unable to find '%s'\n" .context.app .context.entry .key }}
            {{- $error := index nil "Unable to find the given key" }}
          {{- end }}
        {{- end }}

        password: '{{ template "getEnvValue" (dict "context" $applicationContext "key" "db.password") }}'

        access-json:    |
          {
            "token": "{{ template "getEnvValue" (dict "context" $clusterContext "key" "sa.token") }}"
          }
    kind: ConfigMap
    metadata:
      name: mychart-play-common-secretconfig
  6: |
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: mychart-play-common
    spec:
      data:
        - remoteRef:
            key: external-secrets-project-test-application
          secretKey: application
        - remoteRef:
            key: external-secrets-project-test-cluster
          secretKey: cluster
      refreshInterval: 12h
      secretStoreRef:
        kind: ClusterSecretStore
        name: fake
      target:
        name: mychart-play-common
        template:
          engineVersion: v2
          metadata:
            annotations:
              reloader.stakater.com/match: "true"
            labels:
              chart-app: common
              chart-secret-source: external-secrets
          templateFrom:
            - configMap:
                items:
                  - key: common
                    templateAs: KeysAndValues
                name: mychart-play-common-secretconfig
              target: Data
            - configMap:
                items:
                  - key: annotations
                    templateAs: KeysAndValues
                name: mychart-play-common-secretconfig
              target: Annotations
          type: Opaque
  7: |
    apiVersion: networking.k8s.io/v1
    kind: Ingress
    metadata:
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-play-backend
    spec:
      ingressClassName: nginx-test
      rules:
        - host: play.local
          http:
            paths:
              - backend:
                  service:
                    name: mychart-play-backend
                    port:
                      number: 8080
                path: /
                pathType: Prefix
      tls:
        - hosts:
            - play.local
  8: |
    apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      annotations:
        kubernetes.io/ingress.class: traefik
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-play-frontend
    spec:
      entryPoints:
        - web
      routes:
        - kind: Rule
          match: Host(`frontend.traefik.local`)
          services:
            - kind: Service
              name: mychart-play-frontend
              port: 9000
  9: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/component: backend
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-play-backend
    spec:
      ports:
        - name: http
          port: 8080
          targetPort: 8080
        - name: podinfo
          port: 9898
          protocol: TCP
          targetPort: 9898
      selector:
        app.kubernetes.io/component: backend
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/name: play
      type: ClusterIP
  10: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: mychart-0.0.1
      name: mychart-play-frontend
    spec:
      selector:
        app.kubernetes.io/component: frontend
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/name: play
      type: ClusterIP
